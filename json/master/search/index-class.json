[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "search/index",
        "html": "<p>search/index</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';\n\nvar extend = require('extend');",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:search/document}",
        "types": [
          "module:search/document"
        ],
        "typesDescription": "module:<a href=\"module%3Asearch%2Fdocument.html\">search/document</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:search/document}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 25,
    "codeStart": 29,
    "code": "var Document = require('./document.js');",
    "ctx": {
      "type": "declaration",
      "name": "Document",
      "value": "require('./document.js')",
      "string": "Document"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/streamrouter}",
        "types": [
          "module:common/streamrouter"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Fstreamrouter.html\">common/streamrouter</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/streamrouter}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 31,
    "codeStart": 35,
    "code": "var streamRouter = require('../common/stream-router.js');",
    "ctx": {
      "type": "declaration",
      "name": "streamRouter",
      "value": "require('../common/stream-router.js')",
      "string": "streamRouter"
    }
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 37,
    "codeStart": 41,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:search/index ",
        "html": "<p>module:search/index </p>"
      },
      {
        "type": "param",
        "string": "{string} id - ID of the index.\n",
        "name": "id",
        "description": "<ul>\n<li>ID of the index. </li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud');\n\nvar search = gcloud.search({\n  projectId: 'grape-spaceship-123'\n});\n\nvar index = search.index('records');",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;);</p><p>var search = gcloud.search({<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var index = search.index(&#39;records&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Create an Index object to interact with a Google Cloud Search index.</p>",
      "summary": "<p>Create an Index object to interact with a Google Cloud Search index.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 43,
    "codeStart": 60,
    "code": "function Index(search, id) {\n  this.search_ = search;\n  this.id = id;\n\n  if (!this.id) {\n    throw new Error('An ID is needed to access a Google Cloud Search index.');\n  }\n}",
    "ctx": {
      "type": "constructor",
      "name": "Index",
      "string": "Index()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{object|module:search/document} documentObj - A properly-formed\n    Document object as outlined in the\n    [official docs](https://goo.gl/AYhSgI).",
        "name": "documentObj",
        "description": "<ul>\n<li>A properly-formed     Document object as outlined in the<br />  <a href=\"https://goo.gl/AYhSgI\">official docs</a>.</li>\n</ul>\n",
        "types": [
          "object",
          "module:search/document"
        ],
        "typesDescription": "<code>object</code>|module:<a href=\"module%3Asearch%2Fdocument.html\">search/document</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.\n",
        "name": "callback",
        "description": "<ul>\n<li>The callback function. </li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "//-\n// A document can be built using the {module:search/document} object.\n//-\nvar newDocument = index.document('new-document-id');\nnewDocument.addField('person').addTextValue('Stephen');\n\nindex.createDocument(newDocument, function(err, document, apiResponse) {});\n\n//-\n// A document can also be created from a properly-formed object as outlined\n// in the <a href=\"https://goo.gl/AYhSgI\">official docs</a>.\n//\n// This will create the same resulting document object as the example above.\n//-\nvar newDocument = {\n  docId: 'new-document-id',\n  fields: {\n    person: {\n      values: [\n        {\n          stringFormat: 'TEXT',\n          stringValue: 'Stephen'\n        }\n      ]\n    }\n  }\n};\n\nindex.createDocument(newDocument, function(err, document, apiResponse) {});\n\n//-\n// Specifying an ID for your new document isn't required. In both of the\n// scenarios above, simply don't specify 'new-document-id' and one will be\n// generated for you.\n//-",
        "html": "<p>//-<br />// A document can be built using the {module:search/document} object.<br />//-<br />var newDocument = index.document(&#39;new-document-id&#39;);<br />newDocument.addField(&#39;person&#39;).addTextValue(&#39;Stephen&#39;);</p><p>index.createDocument(newDocument, function(err, document, apiResponse) {});</p><p>//-<br />// A document can also be created from a properly-formed object as outlined<br />// in the <a href=\"https://goo.gl/AYhSgI\">official docs</a>.<br />//<br />// This will create the same resulting document object as the example above.<br />//-<br />var newDocument = {<br />  docId: &#39;new-document-id&#39;,<br />  fields: {<br />    person: {<br />      values: [<br />        {<br />          stringFormat: &#39;TEXT&#39;,<br />          stringValue: &#39;Stephen&#39;<br />        }<br />      ]<br />    }<br />  }<br />};</p><p>index.createDocument(newDocument, function(err, document, apiResponse) {});</p><p>//-<br />// Specifying an ID for your new document isn&#39;t required. In both of the<br />// scenarios above, simply don&#39;t specify &#39;new-document-id&#39; and one will be<br />// generated for you.<br />//-</p>"
      }
    ],
    "description": {
      "full": "<p>Create a document in the index.</p>",
      "summary": "<p>Create a document in the index.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 69,
    "codeStart": 114,
    "code": "Index.prototype.createDocument = function(documentObj, callback) {\n  var document;\n\n  if (documentObj instanceof Document) {\n    document = documentObj;\n    documentObj = document.toJSON();\n  } else {\n    document = this.documentFromObject_(documentObj);\n  }\n\n  this.makeReq_('POST', '/documents', null, documentObj, function(err, resp) {\n    if (err) {\n      callback(err, null, resp);\n      return;\n    }\n\n    callback(null, document, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Index",
      "cons": "Index",
      "name": "createDocument",
      "string": "Index.prototype.createDocument()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} id - The id of the document.",
        "name": "id",
        "description": "<ul>\n<li>The id of the document.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:search/document}\n",
        "types": [
          "module:search/document"
        ],
        "typesDescription": "module:<a href=\"module%3Asearch%2Fdocument.html\">search/document</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:search/document}</p>"
      },
      {
        "type": "example",
        "string": "var myDocument = index.document('my-document');",
        "html": "<p>var myDocument = index.document(&#39;my-document&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Access a {module:search/document} object.</p>",
      "summary": "<p>Access a {module:search/document} object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 134,
    "codeStart": 143,
    "code": "Index.prototype.document = function(id) {\n  return new Document(this, id);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Index",
      "cons": "Index",
      "name": "document",
      "string": "Index.prototype.document()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{object=} query - Query object.",
        "name": "query",
        "description": "<ul>\n<li>Query object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} options.autoPaginate - Have pagination handled\n    automatically. Default: true.",
        "name": "options.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled     automatically. Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} query.pageSize - The maximum number of documents to return\n    per page. If not specified, 100 documents are returned per page.",
        "name": "query.pageSize",
        "description": "<ul>\n<li>The maximum number of documents to return     per page. If not specified, 100 documents are returned per page.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} query.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "query.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} query.view - One of `INDEX_VIEW_UNSPECIFIED`, `ID_ONLY`, or\n    `FULL`. See [this table](https://goo.gl/sY6Lpt) for more details.",
        "name": "query.view",
        "description": "<ul>\n<li>One of <code>INDEX_VIEW_UNSPECIFIED</code>, <code>ID_ONLY</code>, or     <code>FULL</code>. See <a href=\"https://goo.gl/sY6Lpt\">this table</a> for more details.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.\n",
        "name": "callback",
        "description": "<ul>\n<li>The callback function. </li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "index.getDocuments(function(err, documents) {\n  if (!err) {\n    // documents is an array of Document objects.\n  }\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction onApiResponse(err, documents, nextQuery, apiResponse) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  // `documents` is an array of Document objects.\n\n  if (nextQuery) {\n    index.getDocuments(nextQuery, onApiResponse);\n  }\n}\n\nindex.getDocuments({\n  autoPaginate: false\n}, onApiResponse);\n\n//-\n// Get the documents as a readable object stream.\n//-\nindex.getDocuments()\n  .on('error', console.error)\n  .on('data', function(document) {\n    // document is a Document object.\n  })\n  .on('end', function() {\n    // All documents retrieved.\n  });\n\n//-\n// If you anticipate many results, you can end a stream early to prevent\n// unnecessary processing and API requests.\n//-\nindex.getDocuments()\n  .on('data', function(document) {\n    this.end();\n  });",
        "html": "<p>index.getDocuments(function(err, documents) {<br />  if (!err) {<br />    // documents is an array of Document objects.<br />  }<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function onApiResponse(err, documents, nextQuery, apiResponse) {<br />  if (err) {<br />    console.error(err);<br />    return;<br />  }</p><p>  // <code>documents</code> is an array of Document objects.</p><p>  if (nextQuery) {<br />    index.getDocuments(nextQuery, onApiResponse);<br />  }<br />}</p><p>index.getDocuments({<br />  autoPaginate: false<br />}, onApiResponse);</p><p>//-<br />// Get the documents as a readable object stream.<br />//-<br />index.getDocuments()<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(document) {<br />    // document is a Document object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All documents retrieved.<br />  });</p><p>//-<br />// If you anticipate many results, you can end a stream early to prevent<br />// unnecessary processing and API requests.<br />//-<br />index.getDocuments()<br />  .on(&#39;data&#39;, function(document) {<br />    this.end();<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Get {module:search/document} objects for all of the documents in this index.</p>",
      "summary": "<p>Get {module:search/document} objects for all of the documents in this index.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 147,
    "codeStart": 210,
    "code": "Index.prototype.getDocuments = function(query, callback) {\n  var self = this;\n\n  if (util.is(query, 'function')) {\n    callback = query;\n    query = {};\n  }\n\n  this.makeReq_('GET', '/documents', query, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, query, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var documents = (resp.documents || [])\n      .map(self.documentFromObject_.bind(self));\n\n    callback(null, documents, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Index",
      "cons": "Index",
      "name": "getDocuments",
      "string": "Index.prototype.getDocuments()"
    }
  },
  {
    "tags": [
      {
        "type": "throws",
        "string": "{error} If a query string or object isn't provided.\n",
        "types": [
          "error"
        ],
        "description": "<p>If a query string or object isn&#39;t provided. </p>"
      },
      {
        "type": "param",
        "string": "{string|object} query - A query object or simply a string query.",
        "name": "query",
        "description": "<ul>\n<li>A query object or simply a string query.</li>\n</ul>\n",
        "types": [
          "string",
          "object"
        ],
        "typesDescription": "<code>string</code>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{boolean} query.autoPaginate - Have pagination handled automatically.\n    Default: true.",
        "name": "query.autoPaginate",
        "description": "<ul>\n<li>Have pagination handled automatically.     Default: true.</li>\n</ul>\n",
        "types": [
          "boolean"
        ],
        "typesDescription": "<code>boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} query.pageSize - The maximum number of documents to return\n    per page. If not specified, 100 documents are returned per page.",
        "name": "query.pageSize",
        "description": "<ul>\n<li>The maximum number of documents to return     per page. If not specified, 100 documents are returned per page.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} query.pageToken - A previously-returned page token\n    representing part of the larger set of results to view.",
        "name": "query.pageToken",
        "description": "<ul>\n<li>A previously-returned page token     representing part of the larger set of results to view.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} query.query = A query string using the syntax described by\n    the [official docs](https://goo.gl/2SYl3S).",
        "name": "query.query",
        "description": "<p>= A query string using the syntax described by     the <a href=\"https://goo.gl/2SYl3S\">official docs</a>.</p>",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.\n",
        "name": "callback",
        "description": "<ul>\n<li>The callback function. </li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var query = 'person:stephen';\n\nindex.search(query, function(err, documents) {\n  if (!err) {\n    // `documents` is an array of Document objects.\n  }\n});\n\n//-\n// To control how many API requests are made and page through the results\n// manually, set `autoPaginate` to `false`.\n//-\nfunction onApiResponse(err, documents, nextQuery, apiResponse) {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  // `documents` is an array of Document objects.\n\n  if (nextQuery) {\n    index.search(nextQuery, onApiResponse);\n  }\n}\n\nindex.search({\n  autoPaginate: false,\n  query: query\n}, onApiResponse);\n\n//-\n// Get the documents that match your query as a readable object stream.\n//-\nindex.search(query)\n  .on('error', console.error)\n  .on('data', function(document) {\n    // document is a Document object.\n  })\n  .on('end', function() {\n    // All search results retrieved.\n  });",
        "html": "<p>var query = &#39;person:stephen&#39;;</p><p>index.search(query, function(err, documents) {<br />  if (!err) {<br />    // <code>documents</code> is an array of Document objects.<br />  }<br />});</p><p>//-<br />// To control how many API requests are made and page through the results<br />// manually, set <code>autoPaginate</code> to <code>false</code>.<br />//-<br />function onApiResponse(err, documents, nextQuery, apiResponse) {<br />  if (err) {<br />    console.error(err);<br />    return;<br />  }</p><p>  // <code>documents</code> is an array of Document objects.</p><p>  if (nextQuery) {<br />    index.search(nextQuery, onApiResponse);<br />  }<br />}</p><p>index.search({<br />  autoPaginate: false,<br />  query: query<br />}, onApiResponse);</p><p>//-<br />// Get the documents that match your query as a readable object stream.<br />//-<br />index.search(query)<br />  .on(&#39;error&#39;, console.error)<br />  .on(&#39;data&#39;, function(document) {<br />    // document is a Document object.<br />  })<br />  .on(&#39;end&#39;, function() {<br />    // All search results retrieved.<br />  });</p>"
      }
    ],
    "description": {
      "full": "<p>Run a query against the documents in this index.</p><p>For a full list of supported query parameters, see the<br /><a href=\"https://goo.gl/706zrP\">JSON API documentation</a>.</p>",
      "summary": "<p>Run a query against the documents in this index.</p>",
      "body": "<p>For a full list of supported query parameters, see the<br /><a href=\"https://goo.gl/706zrP\">JSON API documentation</a>.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 239,
    "codeStart": 301,
    "code": "Index.prototype.search = function(query, callback) {\n  var self = this;\n\n  if (util.is(query, 'string')) {\n    query = {\n      query: query\n    };\n  }\n\n  if (!util.is(query, 'object')) {\n    throw new Error('A query must be either a string or object.');\n  }\n\n  this.makeReq_('GET', '/search', query, null, function(err, resp) {\n    if (err) {\n      callback(err, null, null, resp);\n      return;\n    }\n\n    var nextQuery = null;\n\n    if (resp.nextPageToken) {\n      nextQuery = extend({}, query, {\n        pageToken: resp.nextPageToken\n      });\n    }\n\n    var documents = (resp.results || [])\n      .map(self.documentFromObject_.bind(self));\n\n    callback(null, documents, nextQuery, resp);\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Index",
      "cons": "Index",
      "name": "search",
      "string": "Index.prototype.search()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "\n",
        "visibility": "private",
        "html": ""
      },
      {
        "type": "param",
        "string": "{object} documentObj - Object describing a document.",
        "name": "documentObj",
        "description": "<ul>\n<li>Object describing a document.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object} documentObj.fields - Fields the document contains.",
        "name": "documentObj.fields",
        "description": "<ul>\n<li>Fields the document contains.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number=} documentObj.rank - The rank of the document.",
        "name": "documentObj.rank",
        "description": "<ul>\n<li>The rank of the document.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{module:search/document}\n",
        "types": [
          "module:search/document"
        ],
        "typesDescription": "module:<a href=\"module%3Asearch%2Fdocument.html\">search/document</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{module:search/document}</p>"
      },
      {
        "type": "example",
        "string": "var documentObject = {\n  docId: 'new-document-id',\n  fields: {\n    person: {\n      values: [\n        {\n          stringFormat: 'TEXT',\n          stringValue: 'Stephen'\n        }\n      ]\n    }\n  }\n};\n\nvar document = index.documentFromObject_(documentObject);\n// document is a {module:search/document} object.",
        "html": "<p>var documentObject = {<br />  docId: &#39;new-document-id&#39;,<br />  fields: {<br />    person: {<br />      values: [<br />        {<br />          stringFormat: &#39;TEXT&#39;,<br />          stringValue: &#39;Stephen&#39;<br />        }<br />      ]<br />    }<br />  }<br />};</p><p>var document = index.documentFromObject_(documentObject);<br />// document is a {module:search/document} object.</p>"
      }
    ],
    "description": {
      "full": "<p>Convert an object to a {module:search/document} object.</p>",
      "summary": "<p>Convert an object to a {module:search/document} object.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 335,
    "codeStart": 363,
    "code": "Index.prototype.documentFromObject_ = function(documentObj) {\n  var document = this.document(documentObj.docId);\n\n  if (util.is(documentObj.fields, 'object')) {\n    document.fields = documentObj.fields;\n  }\n\n  if (util.is(documentObj.rank, 'number')) {\n    document.rank = documentObj.rank;\n  }\n\n  return document;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Index",
      "cons": "Index",
      "name": "documentFromObject_",
      "string": "Index.prototype.documentFromObject_()"
    }
  },
  {
    "tags": [
      {
        "type": "private",
        "string": "\n",
        "visibility": "private",
        "html": ""
      },
      {
        "type": "param",
        "string": "{string} method - Action.",
        "name": "method",
        "description": "<ul>\n<li>Action.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} path - Request path.",
        "name": "path",
        "description": "<ul>\n<li>Request path.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{*} query - Request query object.",
        "name": "query",
        "description": "<ul>\n<li>Request query object.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{*} body - Request body contents.",
        "name": "body",
        "description": "<ul>\n<li>Request body contents.</li>\n</ul>\n",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{function} callback - The callback function.",
        "name": "callback",
        "description": "<ul>\n<li>The callback function.</li>\n</ul>\n",
        "types": [
          "function"
        ],
        "typesDescription": "<code>function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      }
    ],
    "description": {
      "full": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "summary": "<p>Make a new request object from the provided arguments and wrap the callback<br />to intercept non-successful responses.</p>",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 377,
    "codeStart": 389,
    "code": "Index.prototype.makeReq_ = function(method, path, query, body, callback) {\n  path = '/indexes/' + this.id + path;\n\n  this.search_.makeReq_(method, path, query, body, callback);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Index",
      "cons": "Index",
      "name": "makeReq_",
      "string": "Index.prototype.makeReq_()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Developer Documentation</p><p>{module:search/index#getDocuments} and {module:search/index#search} can be<br />used with either a callback or as a readable object stream. <code>streamRouter</code> is<br />used to add this dual behavior to these methods.</p>",
      "summary": "<p>Developer Documentation</p>",
      "body": "<p>{module:search/index#getDocuments} and {module:search/index#search} can be<br />used with either a callback or as a readable object stream. <code>streamRouter</code> is<br />used to add this dual behavior to these methods.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 395,
    "codeStart": 401,
    "code": "streamRouter.extend(Index, ['getDocuments', 'search']);\n\nmodule.exports = Index;",
    "ctx": false
  }
]